{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","toggleTheme","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","newText","target","rows","style","backgroundColor","color","disabled","length","toUpperCase","showAlert","toLowerCase","arr","Array","split","i","substring","filter","s","trim","join","Alert","message","height","alert","role","charAt","slice","msg","defaultProps","App","setMode","setAlert","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.773dd858.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\"; // replace anchor tag with link and herf with to it will help us to make fast routing without reloading the application.\r\n\r\n// this navbar used some props and props nothing but property used in this navbar which is passed by user when user use this navbar\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {/* we are use title here which is passed by the user */}\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleTheme} // here we are using functio which is passed by the app.js\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// this is used for restricting the type of props passed in the function this ensure that the type of title and aboutText should be always string and isRequired is used for making this as mendatory if we not pass the argument than it will give you error.\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string,\r\n};\r\n\r\n// this make sure that if user does not passed the props than the value of title and about should be default taken by the function\r\nNavbar.defaultProps = {\r\n  title: \"Enter the Title\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\"; // here useState is our react hook for fuction based components;\r\n// in this form we are going to learn the concept of state in function.\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\"); // this is react state here text is a varaible where the value is Enter your text is provided with the help of useState and it a default value to this variable and setText is function used to change the value of the text variable;\r\n  //now\r\n  // text = \"abcde\" this is wrong way of changeing the value of text variable.\r\n  // setText(\"abcde\") it the correct way of doing this.\r\n\r\n  const changeToUpperCase = () => {\r\n    // console.log(\"uppercase\");\r\n    setText(text.toUpperCase()); // here we are converting our text variable to uppercase.\r\n    props.showAlert(\"Text has been converted to UpperCase\", \"success\");\r\n  };\r\n  const changeToLowerCase = () => {\r\n    // console.log(\"uppercase\");\r\n    setText(text.toLowerCase()); // here we are converting our text variable to lowercase.\r\n    props.showAlert(\"Text has been converted to LowerCase\", \"success\");\r\n  };\r\n\r\n  const changeToCaptialize = () => {\r\n    let arr = new Array(text.length);\r\n    arr = text.split(\" \");\r\n    let newText = \"\";\r\n    for (let i = 0; i < arr.length; i++) {\r\n      newText +=\r\n        arr[i].substring(0, 1).toUpperCase() +\r\n        arr[i].substring(1, arr[i].length) +\r\n        \" \";\r\n    }\r\n    setText(newText);\r\n    props.showAlert(\"Text has been converted to Captialize\", \"success\");\r\n  };\r\n\r\n  const clearText = () => {\r\n    setText(\"\");\r\n  };\r\n\r\n  const onChangeHandler = (event) => {\r\n    // console.log(\"onchange handler\");\r\n    let newText = event.target.value;\r\n    setText(newText); // here event.target.value gives us the current value of the text box and with helop of setText we are able to set the text into input field.\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-3\">\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myForm\"\r\n            value={text}\r\n            onChange={onChangeHandler} // this function help us to write the code with in text box. we are using this because of state variable text which is set a value of this input field so we can not directly make changes in this input box because every the state variable will assing the default value to text box.\r\n            // now when ever we try to make change in input box we have to litisen that event so by default this function pass the event which we have to handel it .\r\n            rows=\"8\"\r\n            style={\r\n              props.mode === \"dark\"\r\n                ? { backgroundColor: \"#11103c\", color: \"white\" }\r\n                : { backgroundColor: \"white\", color: \"black\" }\r\n            }\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"container\">\r\n          <button\r\n            disabled={text.length === 0 ? true : false}\r\n            className=\"btn btn-primary mx-1 my-2\"\r\n            onClick={changeToUpperCase}\r\n          >\r\n            Convert to UpperCase\r\n          </button>\r\n          <button\r\n            disabled={text.length === 0 ? true : false}\r\n            className=\"btn btn-primary mx-1 my-2\"\r\n            onClick={changeToLowerCase}\r\n          >\r\n            Convert to LowerCase\r\n          </button>\r\n          <button\r\n            disabled={text.length === 0 ? true : false}\r\n            className=\"btn btn-primary mx-1 my-2\"\r\n            onClick={changeToCaptialize}\r\n          >\r\n            Convert to Captialize\r\n          </button>\r\n          <button\r\n            disabled={text.length === 0 ? true : false}\r\n            className=\"btn btn-primary mx-1 my-2\"\r\n            onClick={clearText}\r\n          >\r\n            Clear Text\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"container\">\r\n        <h2>Text Summary</h2>\r\n        <p>\r\n          {text.split(/\\s+/).filter((s) => s.length !== 0).length} No of Words\r\n          and {text.trim().split(/[ ]+/).join(/\\s+/).length} No of Character\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Write something in text box to preveiw it.\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const showMessageType = (message) => {\r\n    let msg = message;\r\n    return msg.charAt(0).toUpperCase() + message.slice(1);\r\n  };\r\n  return (\r\n    <div style={{ height: \"50px\" }}>\r\n      {/* this below line of code is a java script code */}\r\n      {props.alert && ( // props.alert && means if props.alert is set to be null than condition become false and it will not return our alert from here but if is true than it will return alert message from here.\r\n        <div>\r\n          <div\r\n            className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n            role=\"alert\"\r\n          >\r\n            <strong>{showMessageType(props.alert.type)} </strong>\r\n            {props.alert.msg}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import Navbar from \"./Components/Navbar\";\r\nimport TextForm from \"./Components/TextForm\";\r\nimport React, { useState } from \"react\";\r\nimport Alert from \"./Components/Alert\";\r\n// import About from \"./Components/About\";\r\n// import this below line from documention to use react-router-dom.\r\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const toggleMode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"#11103c\";\r\n      document.body.style.color = \"white\";\r\n      showAlert(\"Dark mode has been Enabled\", \"success\");\r\n    } else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      document.body.style.color = \"black\";\r\n      showAlert(\"Light mode has been Enabled\", \"success\");\r\n    }\r\n  };\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n    });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <Router> */}\r\n      {/* here title abouTest is props passed to Navbar function  */}\r\n      {/* <Navbar title=\"Instagram\" aboutText=\"About me\" />*/}\r\n      <Navbar title=\"Text Utility\" mode={mode} toggleTheme={toggleMode} />\r\n      {/* we are passing function as prop to the navbar to use toggle */}\r\n      <Alert alert={alert} />\r\n\r\n      {/* <Switch> */}\r\n      {/* use exact path it will match only when you path is exactly matching not in the partial match */}\r\n      {/* <Route exact path=\"/about\">\r\n            <About mode={mode} />\r\n          </Route>\r\n          <Route exact path=\"/\"> */}\r\n      <TextForm\r\n        heading=\"Enter Text for anaylizing\"\r\n        mode={mode}\r\n        showAlert={showAlert}\r\n      />\r\n      {/* </Route>\r\n        </Switch>\r\n      </Router> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}